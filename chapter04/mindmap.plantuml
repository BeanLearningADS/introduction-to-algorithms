@startmindmap

*[#MistyRose]:Divid-and-conquer
strategy;
**[#lightgreen]:Algorithm
Design Paradigm;
***[#FFBBCC] Divide 
****:<b>Divide</b> the problem
into one or more
subproblems;
*****_:smaller instances
of the same problem;
***[#FFBBCC] Conquer
****:<b>Conquer</b> the subproblems
by solving them 
(recursively or directly);
*****_:The recursion 
bottoms out when 
it reaches a 
base case and 
the subproblem 
is small enough 
to solve directly 
without 
further recursing. 
;
***[#FFBBCC] Combine 
****:<b>Combine</b> the 
subproblem solutions;
*****_:to form a 
solution to the 
original problem;

**:powerful strategy 
for designing
asymptotically
efficient algorithms;
**[#lightgreen]:Non-recursive 
approach 
(explicit stack);
**[#lightgreen]:Recursive
approach;
***[#FFBBCC] Recurrence
****:an equation or inequlity 
that describes a 
function in terms of 
its value on other, 
typically smaller, 
arguments using 
the function itself;

***[#FFBBCC] Structure
**** base case 
*****_: not involving
a recursive invocation
;
**** recursive case
*****_:involving 
the recursive invocation
of the same function 
on different
(usually smaller) inputs
;

***[#FFBBCC] Solving recurrences
****[#MistyRose] Substitution method
****[#MistyRose] Recursion-tree method
****[#MistyRose] Master method 
****[#MistyRose] Akra-Bazzi method  

***[#FFBBCC]:Recurrence
Equation;
****:solve by 
getting an explicit
expression for the
running time;
*****_:find a value k
of N for which 
T(k) is known
;
*****_:expand the
right side of 
the Recurrence 
Equation
;

***[#FFBBCC]:The Master
theorem;
****[#lightblue]: must be of the form 
T(n)=aT(n/b) + f(n);

***** f(n) < n^{log_b(a)}
******_ T(n)=θ(n^{log_b(a)})

***** f(n) = n^{log_b(a)}
******_ T(n)=θ(n^{log_b(a)}*logn)

***** f(n) > n^{log_b(a)}
******_ T(n)=θ(f(n))




*[#MistyRose]:4.1 Multiplying
square matrices;
**:(Section D.1)
for how to
multiply 2
square matrices;
**[#lightgreen] Dense matrices
***:most of the 
n^2 entries 
are NOT 0;

**[#lightgreen] Sparse matrices 
***:most of the 
n^2 entries 
are 0;

**[#lightgreen]:Simple 
Divide-and-Conquer 
algorithm;
***[#FFBBCC]:The <b>Divide</b> step 
partitions each 
n x n matrix 
into four n/2 x n/2
matrices;
****_:
A11, A12, A21, A22
B11, B12, B21, B22 and 
C11, C12, C21, C22 respectively
using index calculations
;
***[#FFBBCC]:The <b>Conquer</b> step 
invokes itself 8 times;
****:The first four invocations
compute the first terms ;
*****_:
FUNCTION (A11 ; B11 ; C11 ; n/2)
FUNCTION (A11 ; B12 ; C12 ; n/2)
FUNCTION (A21 ; B11 ; C21 ; n/2)
FUNCTION (A21 ; B12 ; C22 ; n/2)
;
****:The last four invocations
compute and add in 
the second terms;
*****_:
FUNCTION (A12 ; B21 ; C11 ; n/2)
FUNCTION (A12 ; B22 ; C12 ; n/2)
FUNCTION (A22 ; B21 ; C21 ; n/2)
FUNCTION (A22 ; B22 ; C22 ; n/2)
;
****:Each recursive invocation 
adds the product of 
2 submatrices, 
one of A and one of B 
to the appropriate
submatrix of C in place
using index calculations;
*****_:The base case (n=1)
just increase the scalar value 
of a submatrix of C by 
the scalar multiplication
of the submatrices of A and B
c11 = c11 + a11 . b1
;
***[#FFBBCC]:<b>No Combine</b> step 
because the C matrix
is updated inplace;

*[#MistyRose]:4.2 Strassen's 
algorithm for 
matric multiplication;
**:natural definition 
of matrix multiplication 
requires n^3 scalar 
multiplications;
***_:
many mathematicians 
presumed that it
was <b>not possible</b> 
to multiply matrices 
in o(n^3) time 
until 1969
;
**:Strassen’s algorithm 
runs in Theta(n^lg7) time;

*[#MistyRose]:4.3 The substitution
method for solving
recurrences;
**:<b>Guess</b> the form of
the solution using 
symbolic constants;
**:Use <b>mathematical</b> 
<b>induction</b> to show that 
the solution works, 
and find the constants;


*[#MistyRose]:4.4The recursion-tree
method for solving 
recurrences;
**:each node represents 
the cost of a single subproblem 
somewhere in the set of 
recursive function invocations.;
***_:sum all the per-level costs 
to determine the total cost of 
all levels of the recursion.
Sometimes, adding up the 
total cost takes 
more creativity
;

*[#MistyRose]:4.5 The master method 
for solving 
recurrences;
**:For algorithmic 
recurrences of the form 

<b>T(n) = aT(n/b) + f(n),</b>
where a > 0 and b > 1 are constants;
***_:We call f(n) a 
<b>driving function</b>, 
and we call a recurrence 
of this general form a 
<b>master recurrence</b>
;
**[#lightgreen] The master theorem
***[#FFBBCC] If f(n) < n^{log_b(a)}
**** T(n) = θ(n^{log_b(a)})
***[#FFBBCC] If f(n) = n^{log_b(a)}
**** T(n) = θ(n^{log_b(a)}*logn)
***[#FFBBCC]:If
 f(n) > n^{log_b(a)}
 and aT(n/b) ≤ cf(n);
**** T(n) = θ(f(n))


*[#MistyRose]:Proof of 
the continuous
master theorem;

*[#MistyRose]:Akra-Bazzi 
recurrences;



@endmindmap